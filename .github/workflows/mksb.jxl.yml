name: mksb.jxl
on:
  workflow_dispatch:
jobs:
  linux-x64:
    runs-on: ubuntu-22.04
    steps:
      - name: Build
        shell: sudo bash -e {0}
        run: |
          printf 'APT::Install-Recommends "false";\nAPT::Install-Suggests "false";\n' > /etc/apt/apt.conf.d/no-recommends-suggests
          apt update
          apt install -y g++ cmake ninja-build pkg-config libbrotli-dev libgif-dev libjpeg-dev libopenexr-dev libpng-dev
          git clone https://github.com/libjxl/libjxl.git --depth 1 --recursive --shallow-submodules
          cd libjxl
          cat <<EOF >tools/multicall.cc
          #include <stddef.h>
          #include <string.h>

          #include "jxlinfo.c"

          #include "cjxl_main.cc"
          #include "djxl_main.cc"

          #include "cjpegli.cc"
          #include "djpegli.cc"

          int main(int argc, const char *argv[]) {
            if (argc <= 0) {
              return 1;
            }
            const char *argv0 = strrchr(argv[0], '/');
            if (argv0 == NULL) {
              argv0 = argv[0];
            } else {
              argv0++;
            }
            if (strcmp(argv0, "jxl") == 0) {
              argv++;
              argc--;
              if (argc <= 0) {
                return 1;
              }
              argv0 = strrchr(argv[0], '/');
              if (argv0 == NULL) {
                argv0 = argv[0];
              } else {
                argv0++;
              }
            }
            if (argc <= 0) {
              return 1;
            } else if (strcmp(argv0, "jxlinfo") == 0) {
              return cmd_jxlinfo_main(argc, argv);
            } else if (strcmp(argv0, "cjxl") == 0) {
              return cmd_cjxl_main(argc, argv);
            } else if (strcmp(argv0, "djxl") == 0) {
              return cmd_djxl_main(argc, argv);
            } else if (strcmp(argv0, "cjpegli") == 0) {
              return cmd_cjpegli_main(argc, argv);
            } else if (strcmp(argv0, "djpegli") == 0) {
              return cmd_djpegli_main(argc, argv);
            } else {
              return 1;
            }
            return 0;
          }
          EOF
          sed -i tools/jxlinfo.c -e 's|name = malloc|name = (char*)malloc|g'
          sed -i tools/jxlinfo.c -e 's|int main(|int cmd_jxlinfo_main(int argc, const char** argv){//|'
          sed -i tools/cjxl_main.cc -e 's|int main(|int cmd_cjxl_main(int argc, const char** argv){//|'
          sed -i tools/djxl_main.cc -e 's|int main(|int cmd_djxl_main(int argc, const char** argv){//|'
          sed -i tools/cjpegli.cc -e 's|int main(|int cmd_cjpegli_main(|'
          sed -i tools/cjpegli.cc -e 's|namespace {|namespace cjpegli{|'
          sed -i tools/cjpegli.cc -e 's|jpegxl::tools::CJpegliMain|jpegxl::tools::cjpegli::CJpegliMain|'
          sed -i tools/djpegli.cc -e 's|int main(|int cmd_djpegli_main(|'
          sed -i tools/djpegli.cc -e 's|namespace {|namespace djpegli{|'
          sed -i tools/djpegli.cc -e 's|jpegxl::tools::DJpegliMain|jpegxl::tools::djpegli::DJpegliMain|'
          sed -i tools/CMakeLists.txt -e 's|# Main compressor.|add_executable\(multicall multicall.cc\)\ntarget_link_libraries\(multicall jxl jxl_extras_codec jxl_extras-internal jxl_threads jxl_tool\)\nendif\(\)\nif\(0\)|'
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF  -DCMAKE_FIND_LIBRARY_SUFFIXES=".a"           -DJPEGXL_STATIC=ON \ -DBUILD_TESTING=OFF -DJPEGXL_ENABLE_JPEGLI_LIBJPEG=OFF -DJPEGXL_ENABLE_VIEWERS=OFF -DJPEGXL_ENABLE_PLUGINS=OFF -DJPEGXL_ENABLE_OPENEXR=OFF -DJPEGXL_ENABLE_DEVTOOLS=ON
          cmake --build build
          mv build/tools/multicall ../jxl
          cd ..
          strip ./jxl
          zip -9 linux-x64.zip jxl
      - name: Verify
        run: |
          ldd ./jxl || true
          ./jxl cjxl -V
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: "_"
          tag_name: "${{ 'mksb.jxl_20240430_' }}${{ github.run_id }}"
          files: linux-x64.zip
