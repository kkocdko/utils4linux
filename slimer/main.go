package main

import (
	_ "embed"
	"encoding/base64"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"sort"
	"strconv"

	"github.com/h2non/filetype"
)

// [kkocdko@klf lnks]$ du $(realpath $(find chatpic -type f)) | sort -n | wc -c

var progName = "slimer"
var maxCount = 2000
var action = os.Args[1]
var srcDir = os.Args[2]
var retainDir = filepath.Join(srcDir+"."+progName, "retain")
var dummyDir = filepath.Join(srcDir+"."+progName, "dummy")

// var optiDir = filepath.Join(srcDir+"."+progName, "opti")

func main() {
	fmt.Printf("aciton = %v, src = %v\n", action, srcDir)
	switch action {
	case "prepare":
		actionPrepare()
	case "apply":
		actionApply()
	}
}

func panicErr(err any) {
	if err != nil {
		panic(err)
	}
}

func actionPrepare() {
	type Entry struct {
		Path string
		Size int64
	}
	entries := make([]Entry, 0, 4096)
	filepath.WalkDir(srcDir, func(path string, d os.DirEntry, err error) error {
		panicErr(err)
		if (d.Type() & fs.ModeType) != 0 { // for regular files, none will be set
			return nil
		}
		info, err := d.Info()
		panicErr(err)
		entries = append(entries, Entry{Path: path, Size: info.Size()})
		return nil
	})
	sort.Slice(entries, func(i, j int) bool { return entries[i].Size > entries[j].Size })
	panicErr(os.MkdirAll(retainDir, 0755))
	panicErr(os.MkdirAll(dummyDir, 0755))
	// panicErr(os.MkdirAll(optiDir, 0755))
	for i, l := 0, len(entries); i != l && i != maxCount; i++ {
		ext := "bin"
		if t, err := filetype.MatchFile(entries[i].Path); err == nil {
			ext = t.Extension
		}
		oldname := filepath.Join("..", "..", entries[i].Path)
		newname := filepath.Join(retainDir, strconv.Itoa(i)+"."+ext)
		panicErr(os.Symlink(oldname, newname))
	}
}

func actionApply() {
	m := make(map[string][]byte)
	set := func(ext, b64 string) { // should match github.com/h2non/filetype 's extension name
		b, err := base64.StdEncoding.DecodeString(b64)
		panicErr(err)
		m[ext] = b
	}
	set("mp4", "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") // ffmpeg -f lavfi -i nullsrc=s=4x4:r=1:d=30 -an -c:v libx264 -bf 0 a.mp4
	set("flv", "RkxWAQEAAAAJAAAAABIAALgAAAAAAAAAAgAKb25NZXRhRGF0YQgAAAAIAAhkdXJhdGlvbgBAPgAAAAAAAAAFd2lkdGgAQBAAAAAAAAAABmhlaWdodABAEAAAAAAAAAANdmlkZW9kYXRhcmF0ZQAAAAAAAAAAAAAJZnJhbWVyYXRlAD/wAAAAAAAAAAx2aWRlb2NvZGVjaWQAQBwAAAAAAAAAB2VuY29kZXICAA1MYXZmNjAuMjAuMTAwAAhmaWxlc2l6ZQBAnywAAAAAAAAACQAAAMMJAAAyAAAAAAAAABcAAAAAAWQACv/hABhnZAAKrLI/PPgIgAAAAwCAAAADAQeJEyQBAAZo68PLIsD9+PgAAAAAPQkAAoQAAAAAAAAAFwEAAAAAAAJiBgX//17cRem95tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTY0IC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAyMyAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTEgcmVmPTMgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MzoweDExMyBtZT1oZXggc3VibWU9NyBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0xIG1lX3JhbmdlPTE2IGNocm9tYV9tZT0xIHRyZWxsaXM9MSA4eDhkY3Q9MSBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0X3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0tMiB0aHJlYWRzPTEgbG9va2FoZWFkX3RocmVhZHM9MSBzbGljZWRfdGhyZWFkcz0wIG5yPTAgZGVjaW1hdGU9MSBpbnRlcmxhY2VkPTAgYmx1cmF5X2NvbXBhdD0wIGNvbnN0cmFpbmVkX2ludHJhPTAgYmZyYW1lcz0wIHdlaWdodHA9MiBrZXlpbnQ9MjUwIGtleWludF9taW49MSBzY2VuZWN1dD00MCBpbnRyYV9yZWZyZXNoPTAgcmNfbG9va2FoZWFkPTQwIHJjPWNyZiBtYnRyZWU9MSBjcmY9MjMuMCBxY29tcD0wLjYwIHFwbWluPTAgcXBtYXg9NjkgcXBzdGVwPTQgaXBfcmF0aW89MS40MCBhcT0xOjEuMDAAgAAAABVliIQF//7ugr4FN4qTb8NVIKsxPocAAAKPCQAAEQAD6AAAAAAnAQAAAAAAAAhBmjsQX//+8AAAABwJAAAUAAfQAAAAACcBAAAAAAAAC0GaTwhkymEF//7xAAAAHwkAABUAC7gAAAAAJwEAAAAAAAAMQZpyeEPJlMCC//7wAAAAIAkAABUAD6AAAAAAJwEAAAAAAAAMQZqSeEPJlMCC//7xAAAAIAkAABUAE4gAAAAAJwEAAAAAAAAMQZqyeEPJlMCC//7xAAAAIAkAABUAF3AAAAAAJwEAAAAAAAAMQZrSeEPJlMCC//7xAAAAIAkAABUAG1gAAAAAJwEAAAAAAAAMQZryeEPJlMCC//7xAAAAIAkAABUAH0AAAAAAJwEAAAAAAAAMQZsSeEPJlMCC//7wAAAAIAkAABUAIygAAAAAJwEAAAAAAAAMQZsyeEPJlMCC//7wAAAAIAkAABUAJxAAAAAAJwEAAAAAAAAMQZtSeEPJlMCC//7xAAAAIAkAABUAKvgAAAAAJwEAAAAAAAAMQZtyeEPJlMCC//7wAAAAIAkAABUALuAAAAAAJwEAAAAAAAAMQZuSeEPJlMCC//7wAAAAIAkAABUAMsgAAAAAJwEAAAAAAAAMQZuyeEPJlMCC//7xAAAAIAkAABUANrAAAAAAJwEAAAAAAAAMQZvSeEPJlMCC//7xAAAAIAkAABUAOpgAAAAAJwEAAAAAAAAMQZvyeEPJlMCC//7xAAAAIAkAABUAPoAAAAAAJwEAAAAAAAAMQZoSeEPJlMCC//7wAAAAIAkAABUAQmgAAAAAJwEAAAAAAAAMQZoyeEPJlMCC//7wAAAAIAkAABUARlAAAAAAJwEAAAAAAAAMQZpSeEPJlMCC//7xAAAAIAkAABUASjgAAAAAJwEAAAAAAAAMQZpyeEPJlMCC//7wAAAAIAkAABUATiAAAAAAJwEAAAAAAAAMQZqSeEPJlMCC//7wAAAAIAkAABUAUggAAAAAJwEAAAAAAAAMQZqyeEPJlMCC//7xAAAAIAkAABUAVfAAAAAAJwEAAAAAAAAMQZrSeEPJlMCC//7wAAAAIAkAABUAWdgAAAAAJwEAAAAAAAAMQZryeEPJlMCC//7xAAAAIAkAABUAXcAAAAAAJwEAAAAAAAAMQZsSeEPJlMCC//7xAAAAIAkAABUAYagAAAAAJwEAAAAAAAAMQZsyeEPJlMCC//7wAAAAIAkAABUAZZAAAAAAJwEAAAAAAAAMQZtSeEPJlMCC//7xAAAAIAkAABUAaXgAAAAAJwEAAAAAAAAMQZtyeEPJlMCC//7wAAAAIAkAABUAbWAAAAAAJwEAAAAAAAAMQZuSeEPJlMCC3/7xAAAAIAkAABUAcUgAAAAAJwEAAAAAAAAMQZuyeEPJlMCCv/7xAAAAIAkAAAUAcUgAAAAAFwIAAAAAAAAQ")
	set("bmp", "Qk2GAAAAAAAAAHYAAAAoAAAABAAAAAQAAAABAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEREQAiIiIAMzMzAERERABVVVUAZmZmAHd3dwCIiIgAmZmZAKqqqgC7u7sAzMzMAN3d3QDu7u4A////AHd3AAB3dwAAd3cAAHd3AAA=")
	set("png", "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAEBAAAAABJaiyjAAAADElEQVR4AWMoL4cjABZcA7nPFgVvAAAAAElFTkSuQmCC")
	set("jpg", "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAP//////////////////////////////////////////////////////////////////////////////////////2wBDAf//////////////////////////////////////////////////////////////////////////////////////wAARCAAEAAQDASIAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAAAP/EABQQAQAAAAAAAAAAAAAAAAAAAAD/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8AAA//2Q==")
	set("tif", "SUkqABAAAACIiIiIiIiIiAoAAAEDAAEAAAAEAAAAAQEDAAEAAAAEAAAAAgEDAAEAAAAEAAAAAwEDAAEAAAABAAAABgEDAAEAAAAAAAAAEQEEAAEAAAAIAAAAFQEDAAEAAAABAAAAFgEDAAEAAAAAEAAAFwEEAAEAAAAIAAAAHAEDAAEAAAABAAAAAAAAAA==")
	set("gif", "R0lGODdhBAAEAKIAAAAAABERESIiIjMzM0RERFVVVWZmZnd3dywAAAAABAAEAAIDBHi63JcAOw==")
	set("webp", "UklGRh4AAABXRUJQVlA4TBEAAAAvA8AAAAfQu971rv+BiOh/AAA=")
	set("ico", "AAABAAEABAQAAAQABACIAAAAFgAAACgAAAAEAAAACAAAAAEABAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAERERACIiIgAzMzMAREREAFVVVQBmZmYAd3d3AIiIiACZmZkAqqqqALu7uwDMzMwA3d3dAO7u7gD///8Ad3cAAHd3AAB3dwAAd3cAAAB3AAAAdwAAAHcAAAB3AAA=")
	dummyDirEntries, err := os.ReadDir(dummyDir)
	panicErr(err)
	for _, v := range dummyDirEntries {
		newname := filepath.Join(dummyDir, v.Name())
		oldname, err := os.Readlink(newname)
		oldname = filepath.Join(dummyDir, oldname)
		panicErr(err)
		fmt.Printf("filepath.Ext(newname): %v\n", filepath.Ext(newname))
		if b, ok := m[filepath.Ext(newname)[1:]]; ok {
			fmt.Printf("oldname: %v\n", oldname)
			panicErr(os.WriteFile(oldname, b, 0755))
		}
	}
	// optiDirEntries, err := os.ReadDir(optiDir)
	// panicErr(err)
	// for _, v := range optiDirEntries {
	// 	oldname, err := os.Readlink(filepath.Join(dummyDir, v.Name()))
	// 	panicErr(err)
	// 	// os.OpenFile(oldname, os.O_TRUNC)
	// 	// m[filepath.Ext(oldname)]
	// }
}

// CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build
