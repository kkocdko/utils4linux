// >>> client
// prettier-ignore
{
  "experimental": {
    "clash_api": {
      "external_controller": "127.0.0.1:9090",
      "external_ui": "ui", // 打开 http://127.0.0.1:9090/ui 即可，默认会自动下载 yacd-meta。建议把延迟测试地址改成有一点点体积，更能反映实际情况的 https://www.google.com/robots.txt 而不是 generate_204
      "external_ui_download_detour": "proxy" // 需要从 github 下载，走代理会稳一些，请确保第一个代理能连上
    },
    "cache_file": { "enabled": true } // store_fakeip 在极端情况下会让错误无法恢复，建议不要使用
  },
  "dns": {
    "fakeip": {
      "enabled": true, // fakeip 是好东西，虽然有着代理停止后短期内解析异常的问题，但我建议让代理始终运行，大多数时候使用规则分流，必要时切换到 direct 模式而不是关闭代理
      "inet4_range": "198.18.0.0/15",
      "inet6_range": "fc00::/18"
    },
    "strategy": "prefer_ipv4",
    "independent_cache": true, // 不要让 fakeip 和其他 dns 缓存混淆
    "servers": [
      { "address": "h3://223.5.5.5/dns-query", "detour": "direct" }, // 默认是第一个，约等于 final。https://101.226.4.6/dns-query 还可以 resolve?name=www.feishu.cn&type=A // { "address": "dhcp://auto", "detour": "direct" }
      { "tag": "remote", "address": "fakeip" }
    ],
    "rules": [{ "query_type": ["A", "AAAA"], "server": "remote" }] // 尽量让落地服务器做 dns 查询，server 的域名和 direct 会用默认的 dns
  },
  "route": {
    "rule_set": [{"tag":"ip-cn","type":"remote","format":"binary","url":"https://raw.githubusercontent.com/SagerNet/sing-geoip/rule-set/geoip-cn.srs","download_detour":"proxy"},{"tag":"site-cn","type":"remote","format":"binary","url":"https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-geolocation-cn.srs","download_detour":"proxy"}],
    "rules": [
      { "action": "sniff" }, // 协议嗅探。劫持 dns、禁用 quic 等功能都依赖于此
      { "protocol": "quic", "action": "reject" }, // 我不喜欢 quic，强制 fallback 到其他协议
      { "protocol": "dns", "action": "hijack-dns" }, // 劫持 dns，省去手动设置。建议卸载 systemd-resolved 并修改 dns 为 tun ip 段下的 172.19.0.2。不能是 loopback 否则无法劫持
      { "ip_is_private": true, "outbound": "direct" }, // 注意顺序，内网 dns 依然会被上一条劫持
      { "clash_mode": "Direct", "outbound": "direct" }, // 注意顺序，放在开头将导致 direct 模式下 dns 不被劫持
      { "clash_mode": "Global", "outbound": "proxy" }, // 尽量不要用全局模式
      { "domain": "dns.weixin.qq.com", "action": "reject" }, // 屏蔽微信内置 doh，避免 ipv6 下出现问题，见下文中的 tun 设置
      { "domain": "dns.weixin.qq.com.cn", "action": "reject" }, // 同上
      { "package_name": "com.eg.android.AlipayGphone", "outbound": "direct" },
      { "package_name": "com.tencent.mm", "outbound": "direct" },
      { "package_name": "com.tencent.mobileqq", "outbound": "direct" },
      { "package_name": "com.netease.party", "outbound": "direct" },
      // { "domain": "deb.debian.org", "process_path": "/usr/lib/apt/methods/http", "action": "route-options", "override_address": "192.168.1.77", "override_port": 9630 }, // hcp
      // { "domain_suffix": ["youtube.com", "ytimg.com", "googlevideo.com"], "outbound": "proxy" }, // 大流量走个低倍率的节点
      // { "domain_suffix": ["stackoverflow.com","askubuntu.com","superuser.com","serverfault.com","stackexchange.com"], "outbound": "direct" },
      { "domain_suffix": "gstatic.com", "outbound": "proxy" }, // 虽然没被彻底屏蔽，但是最好走代理
      { "domain_suffix": "google.cn", "outbound": "proxy" }, // 同上
      { "domain_suffix": "googleapis.com", "outbound": "proxy" }, // 同上
      { "ip_cidr": "114.114.114.114/32", "outbound": "direct" }, // 在国内的服务器
      { "rule_set": ["ip-cn", "site-cn"], "outbound": "direct" }, // 在国内的域名和 ip。原先的 @cn 已合并到 cn
      { "outbound": "proxy" } // 约等于 final
    ],
    "auto_detect_interface": true // 防止 tun 环路
  },
  "inbounds": [
    {
      "type": "tun", // 有些应用并不理会代理环境变量，所以让 tun 作为兜底措施 // 在 android 上设置 platform.http_proxy 会让知乎等一些垃圾应用挂掉
      "address": ["172.18.0.1/30", "fdfe:dcba:9876::1/126"], // 即便原本无 ipv6 接入，tun 的地址也会让应用误以为可用，见 issue 932。使用 prefer_ipv4 也无法避免问题，因为微信等应用会使用内置 doh
      "route_exclude_address": ["fc00::/8", "192.0.0.0/8"], // 完全不经过 tun，适用于内网的、大流量的、需要 nat 打洞的。注意不要包括上面的 tun 自身与 fakeip
      "auto_route": true,
      "strict_route": true // 确保 dns 被劫持，但在 android 上可能导致局域网分享无法连接，详见文档
    },
    { "type": "mixed", "listen_port": 1080 } // 尽量用 socks，性能损失较小。消耗流量较多的浏览器、git 等主流应用一般都支持 socks。如遇 pip 警告等情况，可以 unset all_proxy ALL_PROXY
  ],
  "outbounds": [
    // groups
    {"tag":"proxy","type":"selector","outbounds":["sh-hk-stls","sh-hk-hy2","lan-socks"]},
    // self-hosted
    {"tag":"sh-hk-stls","detour":"sh-hk-stls-outer","type":"shadowsocks","method":"2022-blake3-aes-128-gcm","password":"xxxx","multiplex":{"enabled":true,"max_connections":2}},{"type":"shadowtls","tag":"sh-hk-stls-outer","server":"114.114.114.114","server_port":19549,"version":3,"password":"xxxx","tls":{"enabled":true,"server_name":"registry.npmmirror.com"}},
    {"tag":"sh-hk-hy2","type":"hysteria2","server":"114.114.114.114","server_port":53,"password":"xxxx","tls":{"enabled":true,"server_name":"registry.npmmirror.com","insecure":true}},
    // imao - paid - forever - https://example.com/api/v1/client/subscribe?token=1234
    {"tag":"imao-hk-1","flow":"xtls-rprx-vision","packet_encoding":"xudp","server":"114.114.114.114","server_port":443},
    // lan
    {"tag":"lan-socks","type":"socks","server":"192.168.1.128","server_port":1090},
    // built-in
    {"tag":"direct","type":"direct"}
  ]
}

// >>> server
/*
{
  "inbounds": [
    {
      "tag": "sh-hk-hy2",
      "type": "hysteria2",
      "listen": "::",
      "listen_port": 53,
      "users": [{ "password": "xxxx" }],
      "tls": { "enabled": true, "server_name": "registry.npmmirror.com", "certificate": ["-----BEGIN CERTIFICATE-----","xxxx","-----END CERTIFICATE-----"], "key": ["-----BEGIN PRIVATE KEY-----","xxxx","-----END PRIVATE KEY-----"] }
    },
    {
      "tag": "sh-hk-stls",
      "type": "shadowtls",
      "listen": "::",
      "listen_port": 19549,
      "detour": "sh-hk-stls-inner",
      "version": 3,
      "users": [{ "password": "xxxx" }], // 执行 sing-box generate rand 16 --base64 生成
      "handshake": { "server": "registry.npmmirror.com", "server_port": 443 }, // 这个域名需要支持 TLS 1.3
      "strict_mode": true
    },
    {
      "tag": "sh-hk-stls-inner",
      "type": "shadowsocks",
      "method": "2022-blake3-aes-128-gcm",
      "password": "xxxx", // 和上面一样的方法生成
      "multiplex": { "enabled": true }
    }
  ],
  "outbounds": [{ "type": "direct" }]
}
*/
